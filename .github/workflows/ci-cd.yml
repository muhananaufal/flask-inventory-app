name: CI-CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Pytest with coverage
        run: |
          pytest --cov=app --cov-report=xml --maxfail=1 -q

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Build Docker image
        if: success() && github.ref == 'refs/heads/main'
        run: docker build -t flask-inventory-app .

      - name: Log in to Docker Hub
        if: success() && github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag & push image
        if: success() && github.ref == 'refs/heads/main'
        run: |
          docker tag flask-inventory-app:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/flask-inventory-app:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-inventory-app:latest

  sonarqube-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=flask-inventory-app
            -Dsonar.sources=.
            -Dsonar.python.coverage.reportPaths=coverage.xml

  notify-slack:
    needs: [build-and-test, sonarqube-scan]
    if: always() # Selalu jalankan job ini, baik sukses maupun gagal
    runs-on: ubuntu-latest
    steps:
      - name: Notify on Success
        if: needs.build-and-test.result == 'success' && needs.sonarqube-scan.result == 'success'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *Build & Scan Berhasil* | `flask-inventory-app`\n*Commit*: `${{ github.event.head_commit.message }}`\n*Aktor*: `${{ github.actor }}`\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Lihat Detail>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ *Build atau Scan Gagal* | `flask-inventory-app`\n*Commit*: `${{ github.event.head_commit.message }}`\n*Aktor*: `${{ github.actor }}`\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Lihat Detail>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
